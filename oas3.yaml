openapi: 3.0.0
info:
  version: '1.0'
  title: "MyKiko OpenAPI 3.0"
  description: API for managing pets.
  license:
    name: MIT
servers:
  - url: http://localhost:8080/api/v1
    description: Localhost
paths:
   /authentications:
    post:
      description: >-
        Verify the user's credentials in the system
      summary: Authenticates the user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email: 
                  type: String
                  description: 'Email address of the user'
                password:
                  type: String
                  description: 'Personal password of the user'
      responses:
        '200':
          description: 'User verified'
          headers:
            'Location':
              schema:
                type: string
              description: Link to the user plus his informations
      
   /registration:
    post:
      description: >-
        Creates a new user in the system
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email: 
                  type: String
                  description: 'Email address of the new user'
                password:
                  type: String
                  description: 'Personal password of the new user'
      responses:
        '201':
          description: 'User created. Link in the Location header'
          headers:
            'Location':
              schema:
                type: string
              description: Link to the newly created user
        '400':
          description: 'Input fields are empty'
          headers:
            'Message':
              schema:
                type: string
              description: Registration failed. input empty

   /infoAnimale:
    get:
      description: >-
        Gets the pet's info from the database
      summary: Sees all the info
      responses:
        '200':
          description: 'Collections of pets'
          content:
            application/json:
              schema:
                type: string
                items:
                  $ref: '#/components/schemas/Animale'
  
   /modificaCredenziali:
    put:
      description: >-
        Modifies user's credentials
      summary: Changes user's info
      responses:
          '200':
            description: 'Changes applyed'
            schema:
              type: array
              items:
                $ref: '#/definitions/schemas/User'
            examples:
              application/json:
                - emailNew: newemail@gmail.com
                  password: newpassword123
          '400':
            description: 'Empty inputs fields'
            headers:
              'Message':
                schema:
                  type: string
                description: Failed changes, empty inputs fields

   /modificaInfoAnimale:
    put:
      description: >-
        Modifies pet's data
      summary: Changes pet's info
      responses:
        '200':
          description: 'Changes applyed'
           schema:
              type: array
              items:
                $ref: '#/definitions/schemas/Animale'
        '400':
           description: 'Empty inputs fields'
            headers:
              'Message':
                schema:
                  type: string
                description: Failed changes, empty inputs fields
                
   /AggiungiAnimale:
    post:
      description: >-
        Puoi aggiungere il tuo animale inserendo le informazioni disponibili
      summary: Crea un nuovo animale nel database
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/schemas/Animale'
      responses:
        201:
          description: 'Data inserted'
          schema:
            $ref: '#/definitions/schemas'
          examples:
            application/json:
              - email: emailUtente
                nome: nome_animale
                razza: razza_animale
                eta: eta_animale
                peso: peso_animale
                codicechip: codicechip_animale
                caratteristicheSpecie: questo animale...
        400:
          description: Empty imputs
          examples:
            application/json:
              - email: emailUtente
                nome: 
                razza: 
                eta: 
                peso: 
                codicechip:
                caratteristicheSpecie:
                
   /deleteaccount:
    x-summary: Elimina account
    delete:
      summary: elimina account con tutti i suoi dati
      responses:
        200:
          description: account eliminato (controllo svolto con successo)
        500:
          description: Delete failed. User not found.
        417:
          description: Eliminazione fallita (controllo svolto senza successo).    
          
   /inforazza:
    x-summary: Informazioni razza
    get:
      summary: Visualizza le informazioni sulla razza dell'animale
      responses:
        200:
          description: Visualizza info
          schema:
            type: array
            items:
              $ref: '#/definitions/schemas'
          examples:
            application/json:
            - infoSpecie: spiegazione della razza
              immagine: /images/esempioaniamle.jpeg
         500:
          description: 'Delete failed. Razza not found.' 
        
   /impegni:
     x-summary: Vede tutte le info dell'impegno
     get:
      summary: Visualizza gli impegni dell'utente
      responses:
        200:
          description: 'Collections of task'
          schema:
                type: array
                items:
                  $ref: '#/definitions/schemas'
          examples:
            application/json:
              - impegno: veterinario
              - animale: Molly
              - luogo: maltese
              - data: 12/06/2022
              - ora: 12:00
        500:
          description: 'User not found'
          
   /deleteanimal:
    x-summary: Elimina animale
    delete:
      summary: elimina animale con tutti i suoi dati
      responses:
        200:
          description: animale eliminato (controllo svolto con successo)
        500:
          description: Delete failed. User not found.
        417:
          description: Eliminazione fallita (controllo svolto senza successo).         
   
   /deletetask:
    x-summary: Elimina impegno
    delete:
      summary: elimina impegno con tutti i suoi dati
      responses:
        200:
          description: impegno eliminato (controllo svolto con successo)
        500:
          description: Delete failed. User not found.
        417:
          description: Eliminazione fallita (controllo svolto senza successo). 
          
   /deletefood:
    x-summary: Elimina cibo
    delete:
      summary: elimina cibo con tutti i suoi dati
      responses:
        200:
          description: cibo eliminato (controllo svolto con successo)
        500:
          description: Delete failed. User not found.
        417:
          description: Eliminazione fallita (controllo svolto senza successo).
          
   /TipologieCibo:
     get:
      summary: Vede tutte le info del cibo
      responses:
        200:
          description: 'Collections of food'
          schema:
            type: array
            items:
              $ref: '#/definitions/schemas'
          examples:
            application/json:
              - nomeProdotto: Cesar
              - quantita: 150
        500:
          description: 'User not found' 
          
   /AggiungiImpegno:
    post:
      description: >-
        Puoi aggiungere il tuo nuovo impegno inserendo le informazioni disponibili
      summary: Crea un nuovo impegno nel database
      parameters:
        - name: body
          in: body 
          required: true
          schema:
            $ref: '#/definitions/schemas'
      responses:
        201:
          description: 'Data Inserted'
          schema:
            $ref: '#/definitions/schemas' 
          examples:
            application/json:
              - email: emailUtente
                impegno: impegno_impegni
                animale: animale_impegni
                luogo: luogo_impegni
                data: data_impegni
                ora: ora_impegni
        400:       
          description: Empty inputs 
          examples:
            application/json:
               - email: emailUtente
                 impegno: 
                 animale: 
                 luogo: 
                 data: 
                 ora:
                 
   /ModificaImpegno:
    x-summary: Dati modificati
    put:
      summary: Modifica dati impegno
      responses:
        200:
          description: Changes applyed
          schema:
            type: array
            items:
              $ref: '#/definitions/schemas'
          examples:
            application/json:
              - email: emailUtente
                idImpegno: 6289378051a91e38f9872234
                impegno: nuovo_impegno
                animale: nuovo_animale
                luogo: nuovo_luogo
                data: nuova_data
                ora: nuova_ora
        400:
          description: Empty imputs
          examples:
            application/json:
              - email: emailUtente
                idImpegno: 6289378051a91e38f9872234
                impegno:
                animale: 
                luogo: 
                data: 
                ora:
        500:
          description: 'User not found'   
          
   /InfoAlimentazioneRazza:
    x-summary: Informazioni alimentazione in base alla razza
    get:
      summary: Visualizza le informazioni dell' alimentazione in base alla razza dell'animale
      responses:
        200:
          description: Visualizza info
          schema:
            type: array
            items:
              $ref: '#/definitions/schemas'
          examples:
            application/json:
            - infoAlimentazione: spiegazione dell' alimentazione consigliata in base alla razza
              immagine: /images/esempioaniamle.jpeg
        500:
          description: 'Delete failed. Razza not found.'      
          
   /AggiungiCibo:
    post:
      description: >-
        Puoi aggiungere il tuo nuovo prodotto alimentare inserendo le informazioni disponibili
      summary: Crea un nuovo prodotto alimentare nel database
      parameters:
        - name: body
          in: body 
          required: true
          schema:
            $ref: '#/definitions/schemas'
      responses:
        201:
          description: 'Data Inserted'
          schema:
            $ref: '#/definitions/schemas' 
          examples:
            application/json:
                prodotto: Friskies
                quantita: 1500
        400:       
          description: Empty inputs 
          examples:
            application/json:
                 prodotto: ''
                 quantita: ''
        423:
          description: 'Food already exists'
          examples:
            application/json:
              - prodotto: uguale a prodotto gia esistente       
          
   /modificavalorecibo:
    x-summary: Dati modificate
    put:
      summary: Modifica dati valore cibo
      responses:
        200:
          description: Changes applyed
          schema:
            type: array
            items:
              $ref: '#/definitions/schemas'
          examples:
            application/json:
              - nomeProdotto: Royal Canin   
              - valore: 10000
        500:
          description: 'User not found'
        417:
          description: Operazione fallita.             
          

components:
  schemas:
    Animale:
      type: object
      required:
        - email
        - nome
        - razza
        - eta
        - peso
        - CodiceChip
        - infoSpecie
        - immagine
        - idAnimale
      properties:
        email:
          type: String
          description: 'User email'
        nome:
          type: String
          description: 'Nome animale'
        razza:
          type: String
          description: 'Razza animale'
        eta:
          type: Number
          description: 'Eta animale'
        peso:
          type: Number
          description: 'Peso animale'
        codiceChip:
          type: String
          description: 'Codice del chip identificativo'
        infoSpecie:
          type: String
          description: descrizione caratteristica specie
        immagine:
          type: string
          description: inidirizzo che conduce all'immagine corretta
        idAnimale:
          type: string
          description: identificativo dell'animale 
        infoAlimentazione:
          type: string
          description: descrizione alimentazione in base alla specie  
    impegni:
         type: object
         required: 
            - impegno
            - animale
            - luogo
            - data
            - idImpegno
          properties:
            impegno:
              type: string
              description: "nome dell'impegno"
            animale:
              type: string
              description: "nome animale"
            luogo:
              type: string
              description: "localita dell'impegno"
            data:
              type: string
              description: "data impegno" 
            ora:
              type: string
              description: "ora impegno"
            idImpegno:
              type: string
              description: identificativo dell'impegno  
    cibo:
      type: object
      required:
         - idCibo
         - nomeProdotto
         - quantita
      properties:
         idCibo:
           type: string
           description: identificativo di cibo
         nomeProdotto:
           type: string
           description: "nome del prodotto"
         quantita:
           type: number
           description: "quantita cibo"  
         
    
    User:
      type: object
      required:
        - email
        - password
        - animale
      properties:
        email:
          type: string
          description: 'User email'
        password:
          type: string
          description: 'User password'
        animale:
          type: object
          desrciption: 'array dati animale'
